knitr::opts_chunk$set(echo = TRUE)
print(mu)
```{r cars}
waiting_times <- c(5.4, 17.9, 19.0, 0.5, 15.9, 2.7, 6.2, 2.5, 4.7, 6.9, 10.8, 24.3, 5.6, 23.0, 10.7)
mu <- mean(waiting_times)
print(mu)
waiting_times <- c(5.4, 17.9, 19.0, 0.5, 15.9, 2.7, 6.2, 2.5, 4.7, 6.9, 10.8, 24.3, 5.6, 23.0, 10.7)
mu <- mean(waiting_times)
print(mu)
shpirot_test <-shapiro.test(waiting_times)
print(shapiro_test)
waiting_times <- c(5.4, 17.9, 19.0, 0.5, 15.9, 2.7, 6.2, 2.5, 4.7, 6.9, 10.8, 24.3, 5.6, 23.0, 10.7)
mu <- mean(waiting_times)
print(mu)
shpirot_test <-shapiro.test(waiting_times)
print(shapiro_test)
print(shapiro_test$statistic)
shpiro_test <-shapiro.test(waiting_times)
print(shapiro_test$statistic)
print(shpiro_test$statistic)
qt(1-alpha,df=n-1)
print(shpiro_test$statistic)
alpha <- shpiro_test$statistic
qt(1-alpha,df=n-1)
n <- len(waiting_times)
n <- length(waiting_times)
qt(1-alpha,df=n-1)
alpha <- 0.03
qnorm(1-alpha)
alpha <- 0.97
qnorm(1-alpha)
qnorm(0.97)
waiting_times <- c(5.4, 17.9, 19.0, 0.5, 15.9, 2.7, 6.2, 2.5, 4.7, 6.9, 10.8, 24.3, 5.6, 23.0, 10.7)
mu <- mean(waiting_times)
sigma <- sd(waiting_times)
print(mu)
shpiro_test <-shapiro.test(waiting_times)
print(shpiro_test$statistic)
n <- length(waiting_times)
alpha <- 0.05
za <- qnorm(1-alpha)
ci <- c(mu -(za/2)*(sigma/sqrt(n)), mu + (za/2)*(sigma/sqrt(n)))
print(ci)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/keuni/Desktop/GIT REPO/EDDA")
clouds <- read.csv("clouds.txt", sep="")
dogs <- read.csv("dogs.txt", sep="")
clouds <- read.csv("clouds.txt", sep="")
cream <- read.csv("cream.txt", sep="")
is.vector(cream$acidity)
cream$batch = as.factor(cream$batch)
cream$position = as.factor(cream$position)
cream$starter = as.factor(cream$starter)
creamanov = lm(acidity~batch+position+starter,data=cream)
anova(creamanov)
summary(creamanov)
cream <- read.csv("cream.txt", sep="")
is.vector(cream$acidity)
cream$batch = as.factor(cream$batch)
cream$position = as.factor(cream$position)
cream$starter = as.factor(cream$starter)
creamanov = lm(acidity~batch+position+starter,data=cream)
anova(creamanov)
summary(creamanov)
dogs <- read.csv("dogs.txt", sep="")
knitr::opts_chunk$set(echo = TRUE)
clouds <- read.csv("clouds.txt", sep="")
is.data.frame(clouds)
clouds_copy <- data.frame(clouds)
clouds_copy$square_root_seeded ='^'(clouds_copy$seeded,1/2)
clouds_copy$square_root_unseeded ='^'(clouds_copy$unseeded,1/2)
clouds_copy$double_square_root_seeded='^'(clouds_copy$square_root_seeded,1/2)
clouds_copy$double_square_root_unseeded='^'(clouds_copy$square_root_unseeded,1/2)
#View(clouds_copy)
dogs <- read.csv("dogs.txt", sep="")
is.data.frame(dogs)
#Calculate the  mean
mean_estimator = mean(clouds$seeded)
std_dev_estimator = sd(clouds$seeded)
n = 26
sqrt(n)
t_0.025 = 2.05954
c_i_lower = mean_estimator - z*std_dev_estimator/sqrt(n)
#Calculate the  mean
mean_estimator = mean(clouds$seeded)
std_dev_estimator = sd(clouds$seeded)
n = 26
sqrt(n)
t_0.025 = 2.05954
c_i_lower = mean_estimator - t_0.025*std_dev_estimator/sqrt(n)
c_i_upper = mean_estimator + t_0.025*std_dev_estimator/sqrt(n)
c_i_lower
c_i_upper
T = median(clouds[['seeded']])
T
B=1000
tstar=numeric(B)
n=26
for (i in 1:B){
xstar=rexp(n,estimator_lambda)
tstar[i]=median(xstar)}
t.test(clouds[['seeded']],mu = 0)
estimator_lambda = 1/mean_estimator
ci_lower = 1/704.8432
ci_upper = 1/179.1260
estimator_lambda
ci_lower
ci_upper
T = median(clouds[['seeded']])
T
B=1000
tstar=numeric(B)
n=26
for (i in 1:B){
xstar=rexp(n,estimator_lambda)
tstar[i]=median(xstar)}
hist(tstar)
## kolmogorov - smirnov Test
ks.test(x = clouds[['seeded']], y = "pexp", rate = estimator_lambda)
pl=sum(tstar<T)/B; pr=sum(tstar>T)/B; p=2*min(pl,pr)
pl;pr;p
## kolmogorov - smirnov Test
ks.test(x = clouds[['seeded']], y = "pexp", rate = estimator_lambda)
pl=sum(tstar<T)/B; pr=sum(tstar>T)/B; p=2*min(pl,pr)
pl;pr;p
pl=sum(tstar<T)/B; pr=sum(tstar>T)/B; p=2*min(pl,pr)
pl;pr;p
pl=sum(tstar<T)/B; pr=sum(tstar>T)/B; p=2*min(pl,pr)
pl;pr;p
pl=sum(tstar<T)/B; pr=sum(tstar>T)/B; p=2*min(pl,pr)
pl;pr;p
pl=sum(tstar<T)/B; pr=sum(tstar>T)/B; p=2*min(pl,pr)
pl;pr;p
seed(1234)
set.seed(1234)
# T-test for two paired samples - double root
t.test(clouds_copy[['double_square_root_seeded']],clouds_copy[['double_square_root_unseeded']],paired=TRUE)
dogs <- read.csv("dogs.txt", sep="")
is.data.frame(dogs)
# FOR NORMALITY CHECK
qqnorm(dogs[,1], main="QQ plot for Isofluorane"); qqline(dogs[,1])
shapiro.test(dogs[,1])
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
waiting_times <- c(5.4, 17.9, 19.0, 0.5, 15.9, 2.7, 6.2, 2.5, 4.7, 6.9, 10.8, 24.3, 5.6, 23.0, 10.7)
mu <- mean(waiting_times)
sigma <- sd(waiting_times)
qqnorm(waiting_times)
shapiro.test(waiting_times)
n <- length(waiting_times)
alpha <- 0.015
za <- qnorm(1-alpha)
ci <- c(mu -(za/2)*(sigma/sqrt(n)), mu + (za/2)*(sigma/sqrt(n)))
print(ci)
za2 <- qnorm(1-alpha/2)
n_minimum <- (za2^2*sigma^2)/1
print(n_minimum)
B = 1000
Tstar = numeric(B)
for(i in 1:B){
Xstar <- sample(waiting_times, replace = TRUE)
Tstar[i] <- mean(Xstar)}
Tstar015 <- quantile(Tstar, 0.015)
Tstar985 <- quantile(Tstar, 0.985)
sum(Tstar <Tstar015)
boodstrap <- c(2*mu-Tstar985,2*mu-Tstar015)
print(boodstrap)
ttest = t.test(waiting_times,mu=15,alt="less")
print(ttest)
n = 10
binom.test(sum(waiting_times<15), n)
B=1000
n<-length(waiting_times)
psign<-numeric(B)
pttest<-numeric(B)
for(i in 1:B) {
x = sample(waiting_times, replace = TRUE)
pttest[i]<-t.test(x, mu=13)[[3]] ## extract p-value
psign[i]<-binom.test(sum(x=13), n, p=0.5)[[3]]
}
sum(psign<0.05)/B
sum(pttest<0.05)/B
for(i in 1:B) {
x = sample(waiting_times, replace = TRUE)
pttest[i]<-t.test(x, mu=14)[[3]] ## extract p-value
psign[i]<-binom.test(sum(x=14), n, p=0.5)[[3]]
}
sum(psign<0.05)/B
sum(pttest<0.05)/B
clouds <- read.csv("clouds.txt", sep="")
is.data.frame(clouds)
clouds_copy <- data.frame(clouds)
clouds_copy$square_root_seeded ='^'(clouds_copy$seeded,1/2)
clouds_copy$square_root_unseeded ='^'(clouds_copy$unseeded,1/2)
clouds_copy$double_square_root_seeded='^'(clouds_copy$square_root_seeded,1/2)
clouds_copy$double_square_root_unseeded='^'(clouds_copy$square_root_unseeded,1/2)
#View(clouds_copy)
# FOR NORMALITY CHECK
hist(clouds_copy[['square_root_seeded']] - clouds_copy[['square_root_unseeded']],main="Square root of seeded - Square root of unseeded")
# FOR NORMALITY CHECK
qqnorm(clouds_copy[['square_root_seeded']]-clouds_copy[['square_root_unseeded']]); qqline(clouds_copy[['square_root_seeded']]-clouds_copy[['square_root_unseeded']])
# T-test for two paired samples - root
t.test(clouds_copy[['square_root_seeded']],clouds_copy[['square_root_unseeded']],paired=TRUE)
## Mann-Whitnney Test
wilcox.test(clouds_copy[['square_root_seeded']],clouds_copy[['square_root_unseeded']])
## kolmogorov - smirnov Test
ks.test(clouds_copy[['square_root_seeded']],clouds_copy[['square_root_unseeded']])
# p-value is less than 0.05 therefore, H0  rejected
# FOR NORMALITY CHECK
hist(clouds_copy[['double_square_root_seeded']]-clouds_copy[['double_square_root_unseeded']],main='Seeded - Unseeded')
# FOR NORMALITY CHECK
qqnorm(clouds_copy[['double_square_root_seeded']]-clouds_copy[['double_square_root_unseeded']])
qqline(clouds_copy[['double_square_root_seeded']]-clouds_copy[['double_square_root_unseeded']])
# T-test for two paired samples - double root
t.test(clouds_copy[['double_square_root_seeded']],clouds_copy[['double_square_root_unseeded']],paired=TRUE)
## Mann-Whitnney Test
wilcox.test(clouds_copy[['double_square_root_seeded']],clouds_copy[['double_square_root_unseeded']])
## kolmogorov - smirnov Test
ks.test(clouds_copy[['double_square_root_seeded']],clouds_copy[['double_square_root_unseeded']])
#Calculate the  mean
mean_estimator = mean(clouds$seeded)
std_dev_estimator = sd(clouds$seeded)
n = 26
sqrt(n)
t_0.025 = 2.05954
c_i_lower = mean_estimator - t_0.025*std_dev_estimator/sqrt(n)
c_i_upper = mean_estimator + t_0.025*std_dev_estimator/sqrt(n)
c_i_lower
c_i_upper
t.test(clouds[['seeded']],mu = 0)
estimator_lambda = 1/mean_estimator
ci_lower = 1/704.8432
ci_upper = 1/179.1260
estimator_lambda
ci_lower
ci_upper
T = median(clouds[['seeded']])
T
B=1000
tstar=numeric(B)
n=26
for (i in 1:B){
xstar=rexp(n,estimator_lambda)
tstar[i]=median(xstar)}
hist(tstar)
pl=sum(tstar<T)/B; pr=sum(tstar>T)/B; p=2*min(pl,pr)
pl;pr;p
## kolmogorov - smirnov Test
ks.test(x = clouds[['seeded']], y = "pexp", rate = estimator_lambda)
# Left tailed
# null hypothesis : median >= 300
# Alternate : median < 300
n = 26
x = sum(clouds[['seeded']] < 300 )
x
binom.test(x,n,p=0.5,alt="less")
num_less_30 = sum(clouds[['seeded']] < 30 )
n=26
binom.test(num_less_30,n,p=0.25,alternative="less")
dogs <- read.csv("dogs.txt", sep="")
is.data.frame(dogs)
# FOR NORMALITY CHECK
qqnorm(dogs[,1], main="QQ plot for Isofluorane"); qqline(dogs[,1])
shapiro.test(dogs[,1])
qqnorm(dogs[,2], main="QQ plot for halothane"); qqline(dogs[,2])
shapiro.test(dogs[,2])
qqnorm(dogs[,3],main = "QQ plot for cyclopropane"); qqline(dogs[,3])
shapiro.test(dogs[,3])
## correlation isofluorane and halothane
cor.test(dogs[['isofluorane']],dogs[['halothane']],method="spearman")
qqnorm(dogs[,1]-dogs[,2] , main = "QQ plot for (Isofluorane - Halothane)")
qqline(dogs[,1]-dogs[,2])
shapiro.test(dogs[,1]-dogs[,2])
t.test(dogs[,1],dogs[,2],paired=TRUE)
boxplot(dogs[,1],dogs[,2],names=c("isoflurane","halothane"))
mystat=function(x,y) {mean(x-y)}
B=1000; tstar=numeric(B)
for (i in 1:B) {
dogstar=t(apply(cbind(dogs[,1],dogs[,2]),1,sample))
tstar[i]=mystat(dogstar[,1],dogstar[,2]) }
myt=mystat(dogs[,1],dogs[,2])
#myt
hist(tstar)
pl=sum(tstar<myt)/B
pr=sum(tstar>myt)/B
p=2*min(pl,pr)
p
dogsframe=data.frame(yield=as.vector(as.matrix(dogs)),variety=factor(rep(1:3,each=10)))
is.factor(dogsframe$variety); is.numeric(dogsframe$variety)
dogsanova=lm(yield~variety,data=dogsframe)
anova(dogsanova)
qqnorm(residuals(dogsanova),main = "QQ plot of estimated erros")
plot(fitted(dogsanova),residuals(dogsanova))
#isoflurane
mean(dogs[,1])
#halothane
mean(dogs[,2])
#cyclopropane
mean(dogs[,3])
kruskal.test(yield~variety,data=dogsframe)
cream <- read.csv("cream.txt", sep="")
is.vector(cream$acidity)
cream$batch = as.factor(cream$batch)
cream$position = as.factor(cream$position)
cream$starter = as.factor(cream$starter)
creamanov = lm(acidity~batch+position+starter,data=cream)
anova(creamanov)
summary(creamanov)
creamanov = lm(acidity~batch+starter,data=cream)
anova(creamanov)
summary(creamanov)
friedman.test(cream$acidity, cream$batch, cream$starter,data=cream)
library(lme4)
creamlmer = lmer(acidity~(1|batch)+starter,data=cream, REML=FALSE)
summary(creamlmer)
creamlmer1 = lmer(acidity~(1|batch),data=cream, REML=FALSE)
anova(creamlmer, creamlmer1)
num_less_30 = sum(clouds[['seeded']] < 30 )
n=26
binom.test(num_less_30,n,p=0.25,alternative="less")
# Left tailed
# null hypothesis : median >= 300
# Alternate : median < 300
n = 26
x = sum(clouds[['seeded']] < 300 )
x
binom.test(x,n,p=0.5)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(out.width='150pt', out.height="125pt", fig.width=3, fig.height=2.5)
creamanov = lm(acidity~batch+starter,data=cream)
anova(creamanov)
summary(creamanov)
cream <- read.csv("cream.txt", sep="")
is.vector(cream$acidity)
cream$batch = as.factor(cream$batch)
cream$position = as.factor(cream$position)
cream$starter = as.factor(cream$starter)
creamanov = lm(acidity~batch+position+starter,data=cream)
anova(creamanov)
summary(creamanov)
